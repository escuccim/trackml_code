plot3d(x1, x2, y)
library(knitr)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
knit_hooks$set(plot = knitr:::hook_plot_html)
runif(1)
data(swiss); par(mfrow = c(2, 2))
fit <- lm(Fertility ~ . , data = swiss); plot(fit)
n <- 100; x <- rnorm(n); y <- x + rnorm(n, sd = .3)
plot(c(-3, 6), c(-3, 6), type = "n", frame = FALSE, xlab = "X", ylab = "Y")
abline(lm(y ~ x), lwd = 2)
points(x, y, cex = 2, bg = "lightblue", col = "black", pch = 21)
points(0, 0, cex = 2, bg = "darkorange", col = "black", pch = 21)
points(0, 5, cex = 2, bg = "darkorange", col = "black", pch = 21)
points(5, 5, cex = 2, bg = "darkorange", col = "black", pch = 21)
points(5, 0, cex = 2, bg = "darkorange", col = "black", pch = 21)
?influence.measures
influences.measures(fit)
influence.measures(fit)
?rstandardf
?rstandard
rstandard(fit)
rstudent(fit)
hatvalues(fit)
max(hatvalues(fit))
which(max(hatvalues(fit)))
dffits(fit)
dfbeta(fit)
dfbetas(fit)
cooks.distance(fit)
x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
plot(fit)
fit <- lm(y ~ x)
round(dfbetas(fit)[1 : 10, 2], 3)
round(hatvalues(fit)[1 : 10], 3)
x <- rnorm(n); y <- x + rnorm(n, sd = .3)
x <- c(5, x); y <- c(5, y)
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
fit2 <- lm(y ~ x)
abline(fit2)
round(dfbetas(fit2)[1 : 10, 2], 3)
round(hatvalues(fit2)[1 : 10], 3)
## Don't everyone hit this server at once.  Read the paper first.
dat <- read.table('http://www4.stat.ncsu.edu/~stefanski/NSF_Supported/Hidden_Images/orly_owl_files/orly_owl_Lin_4p_5_flat.txt', header = FALSE)
pairs(dat)
summary(lm(V1 ~ . -1, data = dat))$coef
fit <- lm(V1 ~ . - 1, data = dat); plot(predict(fit), resid(fit), pch = '.')
data(swiss); par(mfrow = c(2, 2))
fit <- lm(Fertility ~ . , data = swiss); plot(fit)
fit <- lm(Fertility ~ . , data = swiss); plot(fit)
# make this an external chunk that can be included in any file
options(width = 100)
opts_chunk$set(message = F, error = F, warning = F, comment = NA, fig.align = 'center', dpi = 100, tidy = F, cache.path = '.cache/', fig.path = 'fig/')
options(xtable.type = 'html')
knit_hooks$set(inline = function(x) {
if(is.numeric(x)) {
round(x, getOption('digits'))
} else {
paste(as.character(x), collapse = ', ')
}
})
knit_hooks$set(plot = knitr:::hook_plot_html)
runif(1)
n <- 100
plot(c(1, n), 0 : 1, type = "n", frame = FALSE, xlab = "p", ylab = "R^2")
r <- sapply(1 : n, function(p)
{
y <- rnorm(n); x <- matrix(rnorm(n * p), n, p)
summary(lm(y ~ x))$r.squared
}
)
lines(1 : n, r, lwd = 2)
abline(h = 1)
n <- 100; nosim <- 1000
x1 <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n);
betas <- sapply(1 : nosim, function(i){
y <- x1 + rnorm(n, sd = .3)
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
})
round(apply(betas, 1, sd), 5)
n <- 100; nosim <- 1000
x1 <- rnorm(n); x2 <- x1/sqrt(2) + rnorm(n) /sqrt(2)
x3 <- x1 * 0.95 + rnorm(n) * sqrt(1 - 0.95^2);
betas <- sapply(1 : nosim, function(i){
y <- x1 + rnorm(n, sd = .3)
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
})
round(apply(betas, 1, sd), 5)
##doesn't depend on which y you use,
y <- x1 + rnorm(n, sd = .3)
a <- summary(lm(y ~ x1))$cov.unscaled[2,2]
c(summary(lm(y ~ x1 + x2))$cov.unscaled[2,2],
summary(lm(y~ x1 + x2 + x3))$cov.unscaled[2,2]) / a
temp <- apply(betas, 1, var); temp[2 : 3] / temp[1]
##doesn't depend on which y you use,
y <- x1 + rnorm(n, sd = .3)
a <- summary(lm(y ~ x1))$cov.unscaled[2,2]
c(summary(lm(y ~ x1 + x2))$cov.unscaled[2,2],
summary(lm(y~ x1 + x2 + x3))$cov.unscaled[2,2]) / a
temp <- apply(betas, 1, var); temp[2 : 3] / temp[1]
data(swiss);
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
a <- summary(fit1)$cov.unscaled[2,2]
fit2 <- update(fit, Fertility ~ Agriculture + Examination)
fit3 <- update(fit, Fertility ~ Agriculture + Examination + Education)
c(summary(fit2)$cov.unscaled[2,2],
summary(fit3)$cov.unscaled[2,2]) / a
library(car)
install.packages("car")
library(car)
fit <- lm(Fertility ~ . , data = swiss)
vif(fit)
sqrt(vif(fit)) #I prefer sd
?vif
fit <- lm(Fertility ~ . - Examination, data = swiss)
vif(fit)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- update(fit, Fertility ~ Agriculture + Examination + Education)
fit5 <- update(fit, Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
anova(fit1, fit3, fit5)
?anova
fit7 <- update(fit, Fertility ~ Agriculture + Education + Catholic + Infant.Mortality)
fit2 <- update(fit, Fertility ~ Agriculture + Education)
anove(fit1,fit2,fit3)
anova(fit1,fit2,fit3)
anova(fit1,fit2,fit3,fit5)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit2 <- update(fit, Fertility ~ Agriculture + Education)
fit3 <- update(fit, Fertility ~ Agriculture + Education + Examination)
fit5 <- update(fit, Fertility ~ Agriculture + Education + Examination + Catholic + Infant.Mortality)
anova(fit1, fit2, fit3, fit5)
rm(list=ls())
setwd("~/Courses/Advanced Deep Learning/CERN")
require(data.table)
require(bit64)
require(dbscan)
require(doParallel)
require(rBayesianOptimization)
path='./data/train_100_events/'
#########################
score<-function(sub_dt,dft){
df=merge(sub_dt,dft[,.(hit_id,particle_id,weight)],by="hit_id")
df[,Np:=.N,by=particle_id]# Np = Hits per Particle
df[,Nt:=.N,by=track_id]   # Nt = Hits per Track
df[,Ntp:=.N,by=list(track_id,particle_id)]# Hits per Particle per Track
df[,r1:=Ntp/Nt]
df[,r2:=Ntp/Np]
sum(df[r1>.5 & r2>.5,weight])
}
########################
### working function ###
########################
trackML <- function(dfh,w1,w2,w3,w4,w5,Niter,epsilon=350,step, stepeps){
epsilon = epsilon / 100000
dfh[,s1:=hit_id]
dfh[,N1:=1L]
dfh[,r:=sqrt(x*x+y*y+z*z)]
dfh[,rt:=sqrt(x*x+y*y)]
dfh[,a0:=atan2(y,x)]
dfh[,z1:=z/rt]
dfh[,z2:=z/r]
dfh[,z3:=1/z]
mm     <-  1
dz0 = -0.00070
stepdz = 0.00001
for (ii in 0:Niter) {
mm <- mm*(-1)
dz = mm + dz0 * stepdz
dfh[,a1:=a0+mm*(rt+step*rt^2)/1000*(ii/2)/180*pi]
dfh[,a2:=a0+dz*abs(z)]
dfh[,sina1:=sin(a1)]
dfh[,cosa1:=cos(a1)]
dfh[,sina2:=sin(a2)]
dfh[,cosa2:=cos(a2)]
dfh[,x1:=a1/z1]
dfs=scale(dfh[,.(sina1,cosa1,z1,z2,z3,x1,sina2,cosa2)])
cx <- c(w1,w1,w2,w3,w4,w5,w6,w7)
for (jj in 1:ncol(dfs)) dfs[,jj] <- dfs[,jj]*cx[jj]
res=dbscan(dfs,eps=epsilon+(ii*stepeps),minPts = 1)
dfh[,s2:=res$cluster]
dfh[,N2:=.N, by=s2]
maxs1 <- max(dfh$s1)
dfh[,s1:=ifelse(N2>N1 & N2<20,s2+maxs1,s1)]
dfh[,s1:=as.integer(as.factor(s1))]
dfh[,N1:=.N, by=s1]
}
return(dfh$s1)
}
#######################################
# function for Bayessian Optimization #
#   (needs lists: Score and Pred)     #
#######################################
Fun4BO <- function(w1,w2,w3,w4,w5,Niter,epsilon=350,step, stepeps, w6, w7) {
dfh$s1 <- trackML(dfh,w1,w2,w3,w4,w5,Niter,epsilon,step, stepeps, w6, w7)
sub_dt=data.table(event_id=nev,hit_id=dfh$hit_id,track_id=dfh$s1)
sc <- score(sub_dt,dft)
list(Score=sc,Pred=0)
}
###################################
###    Bayesian Optimization    ###
###################################
print("Bayesian Optimization")
nev=1001
dfh=fread(paste0(path,'event00000',nev,'-hits.csv'), showProgress=F)
dft=fread(paste0(path,'event00000',nev,'-truth.csv'),stringsAsFactors = T, showProgress=F)
OPT <- BayesianOptimization(Fun4BO,
bounds = list(w1 = c(0.9, 1.2), w2 = c(0.3, 0.5), w3 = c(0.2, 0.4), w4 = c(0.0, 0.1), w5 = c(0.0, 0.00), Niter = c(150L, 190L), epsilon=c(350L, 355L), step=c(0.000000, 0.000005), stepeps=c(0,0.00001), w6=c(0.5, 1.2), w7=c(0.5, 1.2)),
init_points = 3, n_iter = 30,
acq = "ucb", kappa = 2.576, eps = 0.0,
verbose = TRUE)
########################
### working function ###
########################
trackML <- function(dfh,w1,w2,w3,w4,w5,Niter,epsilon=350,step, stepeps, w6, w7){
epsilon = epsilon / 100000
dfh[,s1:=hit_id]
dfh[,N1:=1L]
dfh[,r:=sqrt(x*x+y*y+z*z)]
dfh[,rt:=sqrt(x*x+y*y)]
dfh[,a0:=atan2(y,x)]
dfh[,z1:=z/rt]
dfh[,z2:=z/r]
dfh[,z3:=1/z]
mm     <-  1
dz0 = -0.00070
stepdz = 0.00001
for (ii in 0:Niter) {
mm <- mm*(-1)
dz = mm + dz0 * stepdz
dfh[,a1:=a0+mm*(rt+step*rt^2)/1000*(ii/2)/180*pi]
dfh[,a2:=a0+dz*abs(z)]
dfh[,sina1:=sin(a1)]
dfh[,cosa1:=cos(a1)]
dfh[,sina2:=sin(a2)]
dfh[,cosa2:=cos(a2)]
dfh[,x1:=a1/z1]
dfs=scale(dfh[,.(sina1,cosa1,z1,z2,z3,x1,sina2,cosa2)])
cx <- c(w1,w1,w2,w3,w4,w5,w6,w7)
for (jj in 1:ncol(dfs)) dfs[,jj] <- dfs[,jj]*cx[jj]
res=dbscan(dfs,eps=epsilon+(ii*stepeps),minPts = 1)
dfh[,s2:=res$cluster]
dfh[,N2:=.N, by=s2]
maxs1 <- max(dfh$s1)
dfh[,s1:=ifelse(N2>N1 & N2<20,s2+maxs1,s1)]
dfh[,s1:=as.integer(as.factor(s1))]
dfh[,N1:=.N, by=s1]
}
return(dfh$s1)
}
#######################################
# function for Bayessian Optimization #
#   (needs lists: Score and Pred)     #
#######################################
Fun4BO <- function(w1,w2,w3,w4,w5,Niter,epsilon=350,step, stepeps, w6, w7) {
dfh$s1 <- trackML(dfh,w1,w2,w3,w4,w5,Niter,epsilon,step, stepeps, w6, w7)
sub_dt=data.table(event_id=nev,hit_id=dfh$hit_id,track_id=dfh$s1)
sc <- score(sub_dt,dft)
list(Score=sc,Pred=0)
}
###################################
###    Bayesian Optimization    ###
###################################
print("Bayesian Optimization")
nev=1001
dfh=fread(paste0(path,'event00000',nev,'-hits.csv'), showProgress=F)
dft=fread(paste0(path,'event00000',nev,'-truth.csv'),stringsAsFactors = T, showProgress=F)
OPT <- BayesianOptimization(Fun4BO,
bounds = list(w1 = c(0.9, 1.2), w2 = c(0.3, 0.5), w3 = c(0.2, 0.4), w4 = c(0.0, 0.1), w5 = c(0.0, 0.00), Niter = c(150L, 190L), epsilon=c(350L, 355L), step=c(0.000000, 0.000005), stepeps=c(0,0.00001), w6=c(0.5, 1.2), w7=c(0.5, 1.2)),
init_points = 3, n_iter = 30,
acq = "ucb", kappa = 2.576, eps = 0.0,
verbose = TRUE)
print("Bayesian Optimization")
nev=1001
dfh=fread(paste0(path,'event00000',nev,'-hits.csv'), showProgress=F)
dft=fread(paste0(path,'event00000',nev,'-truth.csv'),stringsAsFactors = T, showProgress=F)
OPT <- BayesianOptimization(Fun4BO,
bounds = list(w1 = c(0.9, 1.2), w2 = c(0.3, 0.5), w3 = c(0.2, 0.4), w4 = c(0.0, 0.1), w5 = c(0.0, 0.00), Niter = c(150L, 190L), epsilon=c(350L, 351L), step=c(0.000000, 0.000005), stepeps=c(0,0.00001), w6=c(0.0, 1.2), w7=c(0.0, 1.2)),
init_points = 3, n_iter = 30,
acq = "ucb", kappa = 2.576, eps = 0.0,
verbose = TRUE)
print("Bayesian Optimization")
nev=1001
dfh=fread(paste0(path,'event00000',nev,'-hits.csv'), showProgress=F)
dft=fread(paste0(path,'event00000',nev,'-truth.csv'),stringsAsFactors = T, showProgress=F)
OPT <- BayesianOptimization(Fun4BO,
bounds = list(w1 = c(0.9, 1.2), w2 = c(0.3, 0.5), w3 = c(0.2, 0.4), w4 = c(0.0, 0.1), w5 = c(0.0, 0.00), Niter = c(150L, 190L), epsilon=c(350L, 351L), step=c(0.000000, 0.000005), stepeps=c(0,0.00001), w6=c(0.0, 0.5), w7=c(0.0, 0.5)),
init_points = 3, n_iter = 30,
acq = "ucb", kappa = 2.576, eps = 0.0,
verbose = TRUE)
#########################
score<-function(sub_dt,dft){
df=merge(sub_dt,dft[,.(hit_id,particle_id,weight)],by="hit_id")
df[,Np:=.N,by=particle_id]# Np = Hits per Particle
df[,Nt:=.N,by=track_id]   # Nt = Hits per Track
df[,Ntp:=.N,by=list(track_id,particle_id)]# Hits per Particle per Track
df[,r1:=Ntp/Nt]
df[,r2:=Ntp/Np]
sum(df[r1>.5 & r2>.5,weight])
}
########################
### working function ###
########################
trackML <- function(dfh,w1,w2,w3,w4,w5,Niter,epsilon=350,step, stepeps){
epsilon = epsilon / 100000
dfh[,s1:=hit_id]
dfh[,N1:=1L]
dfh[,r:=sqrt(x*x+y*y+z*z)]
dfh[,rt:=sqrt(x*x+y*y)]
dfh[,a0:=atan2(y,x)]
dfh[,z1:=z/rt]
dfh[,z2:=z/r]
dfh[,z3:=1/z]
mm     <-  1
dz0 = -0.00070
stepdz = 0.00001
for (ii in 0:Niter) {
mm <- mm*(-1)
dz = mm + dz0 * stepdz
dfh[,a1:=a0+mm*(rt+step*rt^2)/1000*(ii/2)/180*pi]
dfh[,a2:=a0+dz*abs(z)]
dfh[,sina1:=sin(a1)]
dfh[,cosa1:=cos(a1)]
dfh[,sina1:=sin(a2)]
dfh[,cosa1:=cos(a2)]
dfh[,x1:=a1/z1]
dfs=scale(dfh[,.(sina1,cosa1,z1,z2,z3,x1,sina2,cosa2)])
cx <- c(w1,w1,w2,w3,w4,w5,w6,w7)
for (jj in 1:ncol(dfs)) dfs[,jj] <- dfs[,jj]*cx[jj]
res=dbscan(dfs,eps=epsilon+(ii*stepeps),minPts = 1)
dfh[,s2:=res$cluster]
dfh[,N2:=.N, by=s2]
maxs1 <- max(dfh$s1)
dfh[,s1:=ifelse(N2>N1 & N2<20,s2+maxs1,s1)]
dfh[,s1:=as.integer(as.factor(s1))]
dfh[,N1:=.N, by=s1]
}
return(dfh$s1)
}
#######################################
# function for Bayessian Optimization #
#   (needs lists: Score and Pred)     #
#######################################
Fun4BO <- function(w1,w2,w3,w4,w5,Niter,epsilon=350,step, stepeps) {
dfh$s1 <- trackML(dfh,w1,w2,w3,w4,w5,Niter,epsilon,step, stepeps)
sub_dt=data.table(event_id=nev,hit_id=dfh$hit_id,track_id=dfh$s1)
sc <- score(sub_dt,dft)
list(Score=sc,Pred=0)
}
###################################
###    Bayesian Optimization    ###
###################################
print("Bayesian Optimization")
nev=1001
dfh=fread(paste0(path,'event00000',nev,'-hits.csv'), showProgress=F)
dft=fread(paste0(path,'event00000',nev,'-truth.csv'),stringsAsFactors = T, showProgress=F)
OPT <- BayesianOptimization(Fun4BO,
bounds = list(w1 = c(0.9, 1.2), w2 = c(0.3, 0.5), w3 = c(0.2, 0.4), w4 = c(0.0, 0.1), w5 = c(0.0, 0.00), Niter = c(150L, 190L), epsilon=c(350L, 351L), step=c(0.000000, 0.000005), stepeps=c(0,0.00001)),
init_points = 3, n_iter = 30,
acq = "ucb", kappa = 2.576, eps = 0.0,
verbose = TRUE)
########################
### working function ###
########################
trackML <- function(dfh,w1,w2,w3,w4,w5,Niter,epsilon=350,step, stepeps){
epsilon = epsilon / 100000
dfh[,s1:=hit_id]
dfh[,N1:=1L]
dfh[,r:=sqrt(x*x+y*y+z*z)]
dfh[,rt:=sqrt(x*x+y*y)]
dfh[,a0:=atan2(y,x)]
dfh[,z1:=z/rt]
dfh[,z2:=z/r]
dfh[,z3:=1/z]
mm     <-  1
dz0 = -0.00070
stepdz = 0.00001
for (ii in 0:Niter) {
mm <- mm*(-1)
dz = mm + dz0 * stepdz
dfh[,a1:=a0+mm*(rt+step*rt^2)/1000*(ii/2)/180*pi]
dfh[,a2:=a0+dz*abs(z)]
dfh[,sina1:=sin(a1)]
dfh[,cosa1:=cos(a1)]
dfh[,sina1:=sin(a2)]
dfh[,cosa1:=cos(a2)]
dfh[,x1:=a1/z1]
dfs=scale(dfh[,.(sina1,cosa1,z1,z2,z3,x1)])
cx <- c(w1,w1,w2,w3,w4,w5)
for (jj in 1:ncol(dfs)) dfs[,jj] <- dfs[,jj]*cx[jj]
res=dbscan(dfs,eps=epsilon+(ii*stepeps),minPts = 1)
dfh[,s2:=res$cluster]
dfh[,N2:=.N, by=s2]
maxs1 <- max(dfh$s1)
dfh[,s1:=ifelse(N2>N1 & N2<20,s2+maxs1,s1)]
dfh[,s1:=as.integer(as.factor(s1))]
dfh[,N1:=.N, by=s1]
}
return(dfh$s1)
}
#######################################
# function for Bayessian Optimization #
#   (needs lists: Score and Pred)     #
#######################################
Fun4BO <- function(w1,w2,w3,w4,w5,Niter,epsilon=350,step, stepeps) {
dfh$s1 <- trackML(dfh,w1,w2,w3,w4,w5,Niter,epsilon,step, stepeps)
sub_dt=data.table(event_id=nev,hit_id=dfh$hit_id,track_id=dfh$s1)
sc <- score(sub_dt,dft)
list(Score=sc,Pred=0)
}
###################################
###    Bayesian Optimization    ###
###################################
print("Bayesian Optimization")
nev=1001
dfh=fread(paste0(path,'event00000',nev,'-hits.csv'), showProgress=F)
dft=fread(paste0(path,'event00000',nev,'-truth.csv'),stringsAsFactors = T, showProgress=F)
OPT <- BayesianOptimization(Fun4BO,
bounds = list(w1 = c(0.9, 1.2), w2 = c(0.3, 0.5), w3 = c(0.2, 0.4), w4 = c(0.0, 0.1), w5 = c(0.0, 0.00), Niter = c(150L, 190L), epsilon=c(350L, 351L), step=c(0.000000, 0.000005), stepeps=c(0,0.00001)),
init_points = 3, n_iter = 30,
acq = "ucb", kappa = 2.576, eps = 0.0,
verbose = TRUE)
########################
### working function ###
########################
trackML <- function(dfh,w1,w2,w3,w4,w5,Niter,epsilon=350,step, stepeps){
epsilon = epsilon / 100000
dfh[,s1:=hit_id]
dfh[,N1:=1L]
dfh[,r:=sqrt(x*x+y*y+z*z)]
dfh[,rt:=sqrt(x*x+y*y)]
dfh[,a0:=atan2(y,x)]
dfh[,z1:=z/rt]
dfh[,z2:=z/r]
dfh[,z3:=1/z]
mm     <-  1
dz0 = -0.00070
stepdz = 0.00001
for (ii in 0:Niter) {
mm <- mm*(-1)
dz = mm + dz0 * stepdz
dfh[,a1:=a0+mm*(rt+step*rt^2)/1000*(ii/2)/180*pi]
#dfh[,a2:=a0+dz*abs(z)]
dfh[,sina1:=sin(a1)]
dfh[,cosa1:=cos(a1)]
#dfh[,sina1:=sin(a2)]
#dfh[,cosa1:=cos(a2)]
dfh[,x1:=a1/z1]
dfs=scale(dfh[,.(sina1,cosa1,z1,z2,z3,x1)])
cx <- c(w1,w1,w2,w3,w4,w5)
for (jj in 1:ncol(dfs)) dfs[,jj] <- dfs[,jj]*cx[jj]
res=dbscan(dfs,eps=epsilon+(ii*stepeps),minPts = 1)
dfh[,s2:=res$cluster]
dfh[,N2:=.N, by=s2]
maxs1 <- max(dfh$s1)
dfh[,s1:=ifelse(N2>N1 & N2<20,s2+maxs1,s1)]
dfh[,s1:=as.integer(as.factor(s1))]
dfh[,N1:=.N, by=s1]
}
return(dfh$s1)
}
#######################################
# function for Bayessian Optimization #
#   (needs lists: Score and Pred)     #
#######################################
Fun4BO <- function(w1,w2,w3,w4,w5,Niter,epsilon=350,step, stepeps) {
dfh$s1 <- trackML(dfh,w1,w2,w3,w4,w5,Niter,epsilon,step, stepeps)
sub_dt=data.table(event_id=nev,hit_id=dfh$hit_id,track_id=dfh$s1)
sc <- score(sub_dt,dft)
list(Score=sc,Pred=0)
}
###################################
###    Bayesian Optimization    ###
###################################
print("Bayesian Optimization")
nev=1001
dfh=fread(paste0(path,'event00000',nev,'-hits.csv'), showProgress=F)
dft=fread(paste0(path,'event00000',nev,'-truth.csv'),stringsAsFactors = T, showProgress=F)
OPT <- BayesianOptimization(Fun4BO,
bounds = list(w1 = c(0.9, 1.2), w2 = c(0.3, 0.5), w3 = c(0.2, 0.4), w4 = c(0.0, 0.1), w5 = c(0.0, 0.00), Niter = c(150L, 190L), epsilon=c(350L, 351L), step=c(0.000000, 0.000005), stepeps=c(0,0.00001)),
init_points = 3, n_iter = 30,
acq = "ucb", kappa = 2.576, eps = 0.0,
verbose = TRUE)
########################
###    submission    ###
########################
namef <- system("ls ./data/test/*hits.csv", intern=TRUE)
path <- './data/test/'
print("Preparing submission")
w1    <- OPT$Best_Par[[1]]
w2    <- OPT$Best_Par[[2]]
w3    <- OPT$Best_Par[[3]]
w4    <- OPT$Best_Par[[4]]
w5    <- OPT$Best_Par[[5]]
Niter <- OPT$Best_Par[[6]]
epsilon <- OPT$Best_Par[[7]]
step <- OPT$Best_Par[[8]]
stepeps <- OPT$Best_Par[[9]]
